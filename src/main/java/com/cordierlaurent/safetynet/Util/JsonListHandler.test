package com.cordierlaurent.safetynet.Util;

import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.util.List;
import java.util.Map;
import java.util.ArrayList;

import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.ObjectMapper;

// class générique pour toutes les listes.
public class JsonListHandler<T> {
    
    private String fileName;
    private File file;
    private ObjectMapper mapper = new ObjectMapper();
    
    public JsonListHandler(String fileName) {
        this.fileName = fileName;
        this.file = new File(fileName);
    }
    
    // spotbugs : ne pas faire cette vérification dans le constructeur.
    private void checkJsonFile () throws FileNotFoundException {
        if (!file.exists()) {
            throw new FileNotFoundException("Json file not found : " + fileName);
        }
    }
    
    public List<T> readListFromJsonFile(String entity, Class<T> type) throws FileNotFoundException {
        List<T> list = new ArrayList<T>();
        
        checkJsonFile();
        try {
            // ..............A EXPLIQUER...........
//            list = mapper.readValue(file, mapper.getTypeFactory().constructCollectionType(List.class, type));
            
            // Charger tout le fichier comme un Map
            Map<String, Object> data = mapper.readValue(file, new TypeReference<>() {});
            // Convertir la section correspondant à la clé en liste de type T
            list = mapper.convertValue(data.get(entity), mapper.getTypeFactory().constructCollectionType(List.class, type));            
            
        } catch (IOException e) {
            e.printStackTrace();
        }
        return list;
    }
    
    public void writeListToJsonFile (String entity, List<T> list) throws FileNotFoundException {

        checkJsonFile();

        try {
            // https://stackoverflow.com/questions/13514570/what-is-the-best-way-to-write-a-java-list-to-a-json-array
//            mapper.writeValue(file, list);
            
            // Charger tout le fichier comme un Map
            Map<String, Object> data = mapper.readValue(file, new TypeReference<>() {});
            // Mettre à jour uniquement la section correspondant à la clé
            data.put(entity, list);
            // Sauvegarder tout le fichier avec la section mise à jour
            mapper.writerWithDefaultPrettyPrinter().writeValue(file, data);            
            
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
}
